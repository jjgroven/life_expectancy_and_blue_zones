# -*- coding: utf-8 -*-
"""ML Project - Clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g1rgJp28_Nmb6mBTKl5j470JxhRPXyVc
"""

import pandas as pd
df = pd.read_csv("/content/PCA_3components.csv")
targetDf = df["Life expectancy change groups"]
df = df.drop("Life expectancy change groups", axis=1)
X = df
X

#Kmeans Clustering
from matplotlib import pyplot as plt
from sklearn.cluster import KMeans
import matplotlib.cm as cm
from sklearn.metrics import silhouette_samples, silhouette_score
import numpy as np

range_n_clusters = [2, 3, 4, 5]

for n_clusters in range_n_clusters:
    model = KMeans(n_clusters=n_clusters, random_state=5)
    cluster_labels = model.fit_predict(X)
    silhouette_avg = silhouette_score(X, cluster_labels)
    print(
        "For n_clusters =",
        n_clusters,
        "The average silhouette_score is :",
        silhouette_avg,
    )

for n_clusters in range_n_clusters:
    model = KMeans(n_clusters=n_clusters, random_state=5)
    cluster_labels = model.fit_predict(X)
    fig = plt.figure(figsize = (12,25))
    ax = fig.add_subplot(projection='3d')
    ax.set_xlabel('principal component 1', fontsize = 15)
    ax.set_ylabel('principal component 2', fontsize = 15)
    ax.set_zlabel('principal component 3', fontsize = 15)
    ax.set_title(f'3 component PCA and n = {n_clusters} Cluster Centroids', fontsize = 20)

    finalDf = pd.concat([X, targetDf], axis = 1)
    targetsName = ['Negative Change', 'Low Change', 'Moderate Change', "High Change"]
    targets = [0,1,2,3]
    colors = ['r', 'k','b','c']

    for target, color in zip(targets,colors):
        indicesToKeep = finalDf['Life expectancy change groups'] == target
        ax.scatter(finalDf.loc[indicesToKeep, 'principal component 1']
               , finalDf.loc[indicesToKeep, 'principal component 2']
               , finalDf.loc[indicesToKeep, 'principal component 3']
                , c = color
                , s = 50)
    ax.legend(targetsName)
    ax.scatter(model.cluster_centers_[:,0], model.cluster_centers_[:,1],
           model.cluster_centers_[:,2], s = 300, c = 'y',
           marker='*', label = 'Centroid')
    ax.grid()

#Hierarchical Clustering and dendrogram
import numpy as np
from matplotlib import pyplot as plt
from scipy.cluster.hierarchy import dendrogram, linkage

from sklearn.cluster import AgglomerativeClustering

clustering = AgglomerativeClustering().fit(X)

# Create linkage matrix
linkage_matrix = linkage(X, method='ward')

# Plot the dendrogram
plt.figure(figsize=(10, 7))
dendrogram(linkage_matrix,
           truncate_mode='level',
           p=8)

plt.title("Hierarchical Clustering Dendrogram")
plt.xlabel("Number of points in node (or index of point if no parenthesis).")
plt.show()

#DBSCAN
import matplotlib.pyplot as plt
import numpy as np
from sklearn.cluster import DBSCAN
from sklearn import metrics

db = DBSCAN(eps=0.9, min_samples=3).fit(X)
core_samples_mask = np.zeros_like(db.labels_, dtype=bool)
core_samples_mask[db.core_sample_indices_] = True
labels = db.labels_

# Number of clusters in labels, ignoring noise if present.
n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)

# Plot result
fig = plt.figure(figsize = (12,25))
ax = fig.add_subplot(projection='3d')
# Black removed and is used for noise instead.
unique_labels = set(labels)
print(unique_labels)
colors = ['y', 'b', 'g', 'r']
for k, col in zip(unique_labels, colors):
    if k == -1:
        # Black used for noise.
        col = 'k'

    class_member_mask = (labels == k)

    xy = X[class_member_mask & core_samples_mask]
    ax.scatter(xy['principal component 1']
               , xy['principal component 2']
               , xy['principal component 3']
                , c = col
                , s = 50)

    xy = X[class_member_mask & ~core_samples_mask]
    ax.scatter(xy['principal component 1']
               , xy['principal component 2']
               , xy['principal component 3']
                , c = col
                , s = 50)
ax.set_xlabel('principal component 1', fontsize = 15)
ax.set_ylabel('principal component 2', fontsize = 15)
ax.set_zlabel('principal component 3', fontsize = 15)
ax.set_title('3 component PCA and Density Clusters', fontsize = 20)

ax.grid()

