# -*- coding: utf-8 -*-
"""ML Project - ARM(pt1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DvfMc20ZeNMsKW4_eh7SRZDIxPAFoaOl
"""

#Prep Data
import pandas as pd
lifeExpectancyData = pd.read_csv("/content/HNP_CountryProgress2000_2020.csv")
lifeExpectancyData
#Format columns into categories for ARM
lifeExpectancyARM = lifeExpectancyData.drop(["Country Name","Life expectancy at birth, total (years)"], axis = 1)
#Bin Total Alcohol Consumption
bins = [-10, -1, 1, 10]
lifeExpectancyARM["Change in Alcohol Consumption"] = pd.cut(lifeExpectancyARM["Total alcohol consumption per capita (liters of pure alcohol, projected estimates, 15+ years of age)"],
                                            bins,labels=['Lowered Alcohol Consumption', 'Same Alcohol Consumption', 'Heightened Alcohol Consumption'])
lifeExpectancyARM = lifeExpectancyARM.drop(["Total alcohol consumption per capita (liters of pure alcohol, projected estimates, 15+ years of age)"], axis = 1)

#Bin Change in Death by non-communicable diseases (%).
bins = [-10,-2.5,2.5,40]
lifeExpectancyARM["Change in Death by non-communicable disease"] = pd.cut(lifeExpectancyARM["Cause of death, by non-communicable diseases (% of total)"],
                                            bins,labels=['Lowered death by non-communicable disease', 'Same death by non-communicable disease', 'Heightened death by non-communicable disease'])
lifeExpectancyARM = lifeExpectancyARM.drop(["Cause of death, by non-communicable diseases (% of total)"], axis = 1)

#Bin Change in Death by non-communicable diseases (%).
bins = [-20,-2.5,2.5,40]
lifeExpectancyARM["Change in Mortality by CVD/Cancer/Diabetes/CRD"] = pd.cut(lifeExpectancyARM["Mortality from CVD, cancer, diabetes or CRD between exact ages 30 and 70 (%)"],
                                            bins,labels=['Lowered death by CVD/Cancer/Diabetes/CRD', 'Same death by CVD/Cancer/Diabetes/CRD', 'Heightened death by CVD/Cancer/Diabetes/CRD'])
lifeExpectancyARM = lifeExpectancyARM.drop(["Mortality from CVD, cancer, diabetes or CRD between exact ages 30 and 70 (%)"], axis = 1)

#Bin Change in Prevalence of HIV (%).
bins = [-20,-.25,.25,40]
lifeExpectancyARM["Change in Prevalence of HIV"] = pd.cut(lifeExpectancyARM["Prevalence of HIV, total (% of population ages 15-49)"],
                                            bins,labels=['Lowered Prevalence of HIV', 'Same Prevalence of HIV', 'Heightened Prevalence of HIV'])
lifeExpectancyARM = lifeExpectancyARM.drop(["Prevalence of HIV, total (% of population ages 15-49)"], axis = 1)

#Bin Change in Population Practicing Open Defecation (%).
bins = [-100,-2.5,2.5,40]
lifeExpectancyARM["Change in Open Defecation"] = pd.cut(lifeExpectancyARM["People practicing open defecation (% of population)"],
                                            bins,labels=['Lowered Open defecation', 'Same Open Defecation', 'Heightened Open Defecation'])
lifeExpectancyARM = lifeExpectancyARM.drop(["People practicing open defecation (% of population)"], axis = 1)

#Bin Change in Access to Safe Drinking Water (%).
bins = [-20,-2.5,2.5,60]
lifeExpectancyARM["Change in Access to Safe Drinking Water"] = pd.cut(lifeExpectancyARM["People using safely managed drinking water services (% of population)"],
                                            bins,labels=['Lowered Access to Safe Water', 'Same Access to Safe Water', 'Heightened Access to Safe Water'])
lifeExpectancyARM = lifeExpectancyARM.drop(["People using safely managed drinking water services (% of population)"], axis = 1)

#Bin Change in Population Access to Safe Sanitation (%).
bins = [-20,-2.5,2.5,60]
lifeExpectancyARM["Change in Access to Safe Sanitation"] = pd.cut(lifeExpectancyARM["People using safely managed sanitation services (% of population)"],
                                            bins,labels=['Lowered Access to Sanitation', 'Same Access to Sanitation', 'Heightened Access to Sanitation'])
lifeExpectancyARM = lifeExpectancyARM.drop(["People using safely managed sanitation services (% of population)"], axis = 1)

#Bin Change in Government Health Expenditure (%).
bins = [-20,-1,1,60]
lifeExpectancyARM["Change in Government Health Expenditure"] = pd.cut(lifeExpectancyARM["Domestic general government health expenditure (% of GDP)"],
                                            bins,labels=['Lowered Gov Expenditure %', 'Same Gov Expenditure %', 'Heightened Gov Expenditure %'])
lifeExpectancyARM = lifeExpectancyARM.drop(["Domestic general government health expenditure (% of GDP)"], axis = 1)

#Bin Change in Government Expenditure Per Capita.
bins = [-1000,-250,250,5000]
lifeExpectancyARM["Change in Government Health Expenditure Per Capita"] = pd.cut(lifeExpectancyARM["Domestic general government health expenditure per capita (current US$)"],
                                            bins,labels=['Lowered Gov Expenditure Per Cap', 'Same Gov Expenditure Per Cap', 'Heightened Gov Expenditure Per Cap'])
lifeExpectancyARM = lifeExpectancyARM.drop(["Domestic general government health expenditure per capita (current US$)"], axis = 1)

lifeExpectancyData

lifeExpectancyARM

#Review all quant features that need to be reassigned to binning and ensure appropriate cutoffs

#import seaborn as sns
#import matplotlib.pyplot as plt
#sns.kdeplot(lifeExpectancyData["Domestic general government health expenditure (% of GDP)"])

lifeExpectancyARM.to_csv("lifeExpectancyARM.csv", index=False)

