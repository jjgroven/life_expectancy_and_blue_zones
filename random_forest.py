# -*- coding: utf-8 -*-
"""ML Project - Ensembles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dOldKHdGN8NEQLE5uGfOKTzInu1XAZQE
"""

#Random forest
#Use data from decision tree modeling
#Clean Continuous data
import pandas as pd

df = pd.read_csv("/content/lifeExpectancyMaster.csv")
targetDf = df["Life expectancy at birth, total (years)"]
targetDf = pd.DataFrame(targetDf)
bins = [0, 60, 70, 80, 90]
targetDf["Life expectancy groups"] = pd.cut(targetDf["Life expectancy at birth, total (years)"],
                                            bins,labels=['Low LE', 'Low Middle LE', 'Middle High LE', "High LE"])
df = df.drop(["Year", "Country Name","Life expectancy at birth, total (years)"], axis=1)
X = df
targetDf = targetDf["Life expectancy groups"]
X

X.columns
XshortNames = ['Total alcohol consumption per capita',
       'Death by non-communicable diseases (%)',
       'Mortality, chronic disease(%)',
       'Prevalence of HIV, total(%)',
       'Open defecation',
       'Safe Drinking Water',
       'Safely sanitation services',
       'Government Spending (% of GDP)',
       'Government Spending Per Capita']

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
#Split the dataset into training and testing sets
labels = ['Low LE', 'Low Middle LE', 'Middle High LE', "High LE"]

X_train, X_test, y_train, y_test = train_test_split(X, targetDf, test_size=0.3, random_state=15)

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(n_estimators = 100)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Model accuracy: {accuracy:.2f}")

importance = pd.DataFrame(clf.feature_importances_, index=XshortNames, columns=['Importance'])
print(importance.sort_values(by='Importance', ascending=False))

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
#Calculate the confusion matrix
cm = confusion_matrix(y_test, y_pred)

#Display the confusion matrix using ConfusionMatrixDisplay
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)

# Plot the confusion matrix
fig, ax = plt.subplots(figsize=(8, 6))  # You can adjust the size if needed
disp.plot(cmap=plt.cm.Blues, ax=ax)
plt.title("Confusion Matrix for Random Forest")
plt.show()