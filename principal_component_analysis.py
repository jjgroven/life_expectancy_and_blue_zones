# -*- coding: utf-8 -*-
"""ML Project - PCA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kZIu3uXz7OiZrX4bhzLjVw5m4ToVuZJ4
"""

import pandas as pd
df = pd.read_csv("/content/HNP_CountryProgress2000_2020.csv")
targetDf = df["Life expectancy change groups"]
df = df.drop("Income Level", axis=1)
df = df.drop("Country Name", axis=1)
df = df.drop("Life expectancy change groups", axis=1)

#encode income level as numeric
targetDf = targetDf.map({'Negative Change':0, 'Low Change':1, 'Moderate Change':2, "High Change":3})

df

df.to_csv('PCA_prepped_unscaled.csv', index=False)

#Standard Scaler
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df)
df_scaled
df_scaled_print = pd.DataFrame(df_scaled, columns=df.columns)
df_scaled_print

df_scaled_print.to_csv('PCA_prepped_scaled.csv', index=False)

from sklearn.decomposition import PCA

pca = PCA(n_components=2)

principalComponents = pca.fit_transform(df_scaled)
principalDf = pd.DataFrame(data = principalComponents)

principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2'])

principalDf.head()

finalDf_n2 = pd.concat([principalDf, targetDf], axis = 1)
finalDf_n2.head()

finalDf_n2["Life expectancy change groups"].dtype

explained_variance = pca.explained_variance_ratio_

eigenvalues = pca.explained_variance_
eigenvalues

pca.explained_variance_ratio_.cumsum()

import numpy as np
cumulative_variance = np.cumsum(explained_variance)

cumulative_variance_df = pd.DataFrame({
    'Principal Component': [f'PC{i+1}' for i in range(len(cumulative_variance))],
    'Cumulative Variance': cumulative_variance
})

cumulative_variance_df.round(4)

# Plot for individual explained variance
import matplotlib.pyplot as plt

plt.figure()
plt.bar(range(1, len(explained_variance) + 1), explained_variance, alpha=0.5, align='center')
plt.ylabel('Explained variance ratio')
plt.xlabel('Principal components')
plt.xticks(range(1, len(explained_variance) + 1))
plt.title('Individual Variance Explained by Each Principal Component')
plt.grid(True)
plt.show()

fig = plt.figure(figsize = (12,8))
ax = fig.add_subplot(1,1,1)
ax.set_xlabel('Principal Component 1', fontsize = 15)
ax.set_ylabel('Principal Component 2', fontsize = 15)
ax.set_title('2 component PCA', fontsize = 20)

targetsName = ['Negative Change', 'Low Change', 'Moderate Change', "High Change"]

targets = [0,1,2,3]
colors = ['r', 'k','b','c']
for target, color in zip(targets,colors):
    indicesToKeep = finalDf_n2['Life expectancy change groups'] == target
    ax.scatter(finalDf_n2.loc[indicesToKeep, 'principal component 1']
               , finalDf_n2.loc[indicesToKeep, 'principal component 2']
               , c = color
               , s = 50)
ax.legend(targetsName)
ax.grid()

from sklearn.decomposition import PCA

pca = PCA(n_components=3)
#pca = PCA()

principalComponents = pca.fit_transform(df_scaled)
principalDf = pd.DataFrame(data = principalComponents)

principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2','principal component 3'])

principalDf.head()

finalDf_n3 = pd.concat([principalDf, targetDf], axis = 1)
finalDf_n3.head()

#Export data for Clustering
finalDf_n3.to_csv('PCA_3components.csv', index=False)

explained_variance = pca.explained_variance_ratio_

eigenvalues = pca.explained_variance_
eigenvalues

pca.explained_variance_ratio_.cumsum()

import numpy as np
cumulative_variance = np.cumsum(explained_variance)

cumulative_variance_df = pd.DataFrame({
    'Principal Component': [f'PC{i+1}' for i in range(len(cumulative_variance))],
    'Cumulative Variance': cumulative_variance
})

cumulative_variance_df.round(4)

# Plot for individual explained variance
import matplotlib.pyplot as plt

plt.figure()
plt.bar(range(1, len(explained_variance) + 1), explained_variance, alpha=0.5, align='center')
plt.ylabel('Explained variance ratio')
plt.xlabel('Principal components')
plt.xticks(range(1, len(explained_variance) + 1))
plt.title('Individual Variance Explained by Each Principal Component')
plt.grid(True)
plt.show()

fig = plt.figure(figsize = (12,20))
ax = fig.add_subplot(projection='3d')
ax.set_xlabel('Principal Component 1', fontsize = 15)
ax.set_ylabel('Principal Component 2', fontsize = 15)
ax.set_zlabel('Principal Component 3', fontsize = 15)
ax.set_title('3 component PCA', fontsize = 20)

targetsName = ['Negative Change', 'Low Change', 'Moderate Change', "High Change"]

targets = [0,1,2,3]
colors = ['r', 'k','b','c']
for target, color in zip(targets,colors):
    indicesToKeep = finalDf_n3['Life expectancy change groups'] == target
    ax.scatter(finalDf_n3.loc[indicesToKeep, 'principal component 1']
               , finalDf_n3.loc[indicesToKeep, 'principal component 2']
               , finalDf_n3.loc[indicesToKeep, 'principal component 3']
               , c = color
               , s = 50)
ax.legend(targetsName)
ax.grid()

from sklearn.decomposition import PCA

pca = PCA(n_components= 8)

principalComponents = pca.fit_transform(df_scaled)
principalDf = pd.DataFrame(data = principalComponents)

principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2','principal component 3',
                          'principal component 4', 'principal component 5','principal component 6',
                          'principal component 7', 'principal component 8'])

finalDf_n8 = pd.concat([principalDf, targetDf], axis = 1)
finalDf_n8.head()

explained_variance = pca.explained_variance_ratio_

eigenvalues = pca.explained_variance_
eigenvalues

pca.explained_variance_ratio_.cumsum()

import numpy as np
cumulative_variance = np.cumsum(explained_variance)

cumulative_variance_df = pd.DataFrame({
    'Principal Component': [f'PC{i+1}' for i in range(len(cumulative_variance))],
    'Cumulative Variance': cumulative_variance
})

cumulative_variance_df.round(4)

