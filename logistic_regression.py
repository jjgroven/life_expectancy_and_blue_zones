# -*- coding: utf-8 -*-
"""ML Project - Logistic Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PyQjkm3zWWD26a_js75LK-gVHIJMXXF-
"""

import pandas as pd

df = pd.read_csv("/content/lifeExpectancyARM.csv")
targetDf = df["Life expectancy change groups"]

#Encode Negative and Low Change to 0, and Moderate and High Change to 1
#These will be our binary classes

targetDf = targetDf.replace(["Negative Change", "Low Change"], 0)
targetDf = targetDf.replace(["Moderate Change", "High Change"], 1)
targetDf

df = df.drop("Life expectancy change groups", axis=1)
X = df
X

targetDf.value_counts()

#One Hot encode Categories
df_encoded = pd.get_dummies(df)
X=df_encoded
X

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, accuracy_score
import matplotlib.pyplot as plt

labels = ['Negative/Low Change', 'Moderate/High change']

#Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, targetDf, test_size=0.3, random_state=27)

X_train.head(5)

X_test.head(5)

y_train.head(5)

y_test.head(5)

#Initialize the Logistic Regression model
model = LogisticRegression(random_state=42)

#Train the model
model.fit(X_train, y_train)

#Make predictions on the test set
y_pred = model.predict(X_test)

#Calculate and display the confusion matrix
cm = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model accuracy: {accuracy:}")

#Visualize the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)
fig, ax = plt.subplots(figsize=(6, 6))
disp.plot(cmap=plt.cm.Blues, ax=ax)
plt.title("Confusion Matrix for Logistic Regression")
plt.show()

#MULTINOMIAL NAIVE BAYES
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

labels = ['Negative/Low Change', 'Moderate/High change']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, targetDf, test_size=0.3, random_state=27)

# Initialize and fit the Multinomial Naive Bayes model
mnb = MultinomialNB()
mnb.fit(X_train, y_train)

# Predict on test data
y_pred = mnb.predict(X_test)

# Model accuracy
accuracy = mnb.score(X_test, y_test)
print("Multinomial Naive Bayes accuracy:", accuracy)

#Calculate the confusion matrix
cm = confusion_matrix(y_test, y_pred)

#Display the confusion matrix using ConfusionMatrixDisplay
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)

# Plot the confusion matrix
fig, ax = plt.subplots(figsize=(8, 6))  # You can adjust the size if needed
disp.plot(cmap=plt.cm.Blues, ax=ax)
plt.title("Confusion Matrix for Multinomial Naive Bayes")
plt.show()

