# -*- coding: utf-8 -*-
"""ML Project - Decision Trees.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kkP8IHyy6kYasC8xChyBHh62egr8thUQ
"""

#Clean Continuous data
import pandas as pd

df = pd.read_csv("/content/lifeExpectancyMaster.csv")
targetDf = df["Life expectancy at birth, total (years)"]
targetDf = pd.DataFrame(targetDf)
bins = [0, 60, 70, 80, 90]
targetDf["Life expectancy groups"] = pd.cut(targetDf["Life expectancy at birth, total (years)"],
                                            bins,labels=['Low LE', 'Low Middle LE', 'Middle High LE', "High LE"])
df = df.drop(["Year", "Country Name","Life expectancy at birth, total (years)"], axis=1)
X = df
targetDf = targetDf["Life expectancy groups"]
X

X.columns
XshortNames = ['Total alcohol consumption per capita',
       'Death by non-communicable diseases (%)',
       'Mortality, chronic disease(%)',
       'Prevalence of HIV, total(%)',
       'Open defecation',
       'Safe Drinking Water',
       'Safely sanitation services',
       'Government Spending (% of GDP)',
       'Government Spending Per Capita']

# Import necessary libraries
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

labels = ['Low LE', 'Low Middle LE', 'Middle High LE', "High LE"]

#Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, targetDf, test_size=0.3, random_state=15)

X_train.head(5)

X_test.head(5)

y_train.head(5)

y_test.head(5)

#Initialize the Decision Tree Classifier
tree = DecisionTreeClassifier(max_depth=3, random_state=42)

#Train the model
tree.fit(X_train, y_train)

#Predict on the test data
y_pred = tree.predict(X_test)

#Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model accuracy: {accuracy:.2f}")

#Visualize the Decision Tree
plt.figure(figsize=(25, 15))
plot_tree(tree, feature_names=XshortNames, class_names=labels, filled=True, rounded=True,fontsize=14)
plt.title("Decision Tree Visualization: Root 1")
plt.show()

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
#Calculate the confusion matrix
cm = confusion_matrix(y_test, y_pred)

#Display the confusion matrix using ConfusionMatrixDisplay
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)

# Plot the confusion matrix
fig, ax = plt.subplots(figsize=(8, 6))  # You can adjust the size if needed
disp.plot(cmap=plt.cm.Blues, ax=ax)
plt.title("Confusion Matrix for Root Node 1")
plt.show()

#Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, targetDf, test_size=0.3, random_state=40)

#Initialize the Decision Tree Classifier
# You can specify parameters like max_depth to prevent overfitting
tree = DecisionTreeClassifier(max_depth=3, random_state=42)

#Train the model
tree.fit(X_train, y_train)

#Predict on the test data
y_pred = tree.predict(X_test)

#Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model accuracy: {accuracy:.2f}")

#Visualize the Decision Tree
plt.figure(figsize=(25, 15))
plot_tree(tree, feature_names=XshortNames, class_names=labels, filled=True, rounded=True,fontsize=14)
plt.title("Decision Tree Visualization: Root 2")
plt.show()

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
#Calculate the confusion matrix
cm = confusion_matrix(y_test, y_pred)

#Display the confusion matrix using ConfusionMatrixDisplay
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)

# Plot the confusion matrix
fig, ax = plt.subplots(figsize=(8, 6))  # You can adjust the size if needed
disp.plot(cmap=plt.cm.Blues, ax=ax)
plt.title("Confusion Matrix for Root Node 2")
plt.show()

X.columns
XshortNames = ['Total alcohol consumption per capita',
       'Mortality, chronic disease(%)',
       'Prevalence of HIV, total(%)',
       'Open defecation',
       'Safely sanitation services',
       'Government Spending (% of GDP)',
       'Government Spending Per Capita']
X = X.drop(["Cause of death, by non-communicable diseases (% of total)",
            "People using safely managed drinking water services (% of population)"], axis=1)

#Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, targetDf, test_size=0.3, random_state=12)

#Initialize the Decision Tree Classifier
# You can specify parameters like max_depth to prevent overfitting
tree = DecisionTreeClassifier(max_depth=3, random_state=42)

#Train the model
tree.fit(X_train, y_train)

#Predict on the test data
y_pred = tree.predict(X_test)

#Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model accuracy: {accuracy:.2f}")

#Visualize the Decision Tree
plt.figure(figsize=(25, 15))
plot_tree(tree, feature_names=XshortNames, class_names=labels, filled=True, rounded=True,fontsize=14)
plt.title("Decision Tree Visualization: Root 3")
plt.show()

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
#Calculate the confusion matrix
cm = confusion_matrix(y_test, y_pred)

#Display the confusion matrix using ConfusionMatrixDisplay
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)

# Plot the confusion matrix
fig, ax = plt.subplots(figsize=(8, 6))  # You can adjust the size if needed
disp.plot(cmap=plt.cm.Blues, ax=ax)
plt.title("Confusion Matrix for Root Node 3")
plt.show()

